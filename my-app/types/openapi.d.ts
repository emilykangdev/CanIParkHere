/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Health check endpoint.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/check-parking-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Parking From Image
         * @description Query ChatGPT, get a JSON response, and return a structured ParkingCheckResponse about the parking image.
         *     FastAPI automatically converts the returned object into JSON.
         *     This also saves the JSON into an in-memory dictionary.
         */
        post: operations["check_parking_from_image_check_parking_image_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/check-parking-location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Parking Location
         * @description TODO: Dummy endpoint, update later after exploring Seattle Parking CSV.
         */
        post: operations["check_parking_location_check_parking_location_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/followup-question": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Followup Question
         * @description Handle follow-up questions based on the JSON summary
         *     that corresponds to a specific session ID from the frontend.
         */
        post: operations["followup_question_followup_question_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Detailed health check with service status.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_check_parking_from_image_check_parking_image_post */
        Body_check_parking_from_image_check_parking_image_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Datetime Str */
            datetime_str: string;
        };
        /**
         * FollowUpRequest
         * @description Request for follow-up questions about a parking check
         */
        FollowUpRequest: {
            /**
             * Session Id
             * @description Session ID from previous parking check
             */
            session_id: string;
            /**
             * Question
             * @description User's follow-up question
             */
            question: string;
        };
        /**
         * FollowUpResponse
         * @description Response to follow-up question
         */
        FollowUpResponse: {
            /**
             * Answer
             * @description Answer to the user's question
             */
            answer: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LocationCheckRequest
         * @description Request for location-based parking check
         */
        LocationCheckRequest: {
            /**
             * Latitude
             * @description Latitude coordinate
             */
            latitude: number;
            /**
             * Longitude
             * @description Longitude coordinate
             */
            longitude: number;
            /**
             * Datetime
             * @description Date/time for parking check
             */
            datetime: string;
        };
        /**
         * LocationCheckResponse
         * @description Response from location-based parking check
         */
        LocationCheckResponse: {
            /**
             * Canpark
             * @description Whether parking is allowed at this location
             */
            canPark: boolean;
            /**
             * Message
             * @description Descriptive message about parking rules
             */
            message: string;
            /**
             * Processing Method
             * @description Processing method identifier
             * @default location_api
             */
            processing_method: string;
        };
        /**
         * ParkingCheckResponse
         * @description Response from parking sign analysis
         */
        ParkingCheckResponse: {
            /**
             * Messagetype
             * @description Type of message for frontend routing
             */
            messageType: string;
            /**
             * Session Id
             * @description Session ID for follow-up questions
             */
            session_id: string;
            /**
             * Isparkingsignfound
             * @description Whether a parking sign was detected
             * @enum {string}
             */
            isParkingSignFound: "true" | "false";
            /**
             * Canpark
             * @description Parking permission status
             * @enum {string}
             */
            canPark: "true" | "false" | "uncertain";
            /**
             * Reason
             * @description Clear explanation of the parking decision
             */
            reason: string;
            /**
             * Rules
             * @description Full text of parking rules found
             */
            rules: string;
            /**
             * Parsedtext
             * @description Raw text extracted from the image
             */
            parsedText: string;
            /**
             * Advice
             * @description Additional helpful advice
             */
            advice: string;
            /**
             * Processing Method
             * @description Method used to process the request
             */
            processing_method: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    check_parking_from_image_check_parking_image_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_check_parking_from_image_check_parking_image_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParkingCheckResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_parking_location_check_parking_location_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LocationCheckRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationCheckResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    followup_question_followup_question_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FollowUpRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowUpResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
